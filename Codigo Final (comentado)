# Actividad final de análisis de señales de sensores
# Incluye promediado, filtrado (pasa bajas y pasa bandas) y análisis de frecuencia (FFT)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt
from scipy.fft import fft, fftfreq

# ----------- Cargar archivos desde carpeta Descargas -----------

ruta = r"C:\Users\Angel\Downloads"  # Ruta donde están los archivos .csv

# Cargamos los tres sensores: temperatura, humedad y viento
temp = pd.read_csv(ruta + r"\temperatura.csv")
hum = pd.read_csv(ruta + r"\humedad.csv")
vien = pd.read_csv(ruta + r"\viento.csv")

# ----------- Parámetros de adquisición -----------

intervalo = 5          # Cada muestra fue tomada cada 5 segundos
fs = 1 / intervalo     # Frecuencia de muestreo = 0.2 Hz (1 dato cada 5 s)

# Agregamos una columna de tiempo para graficar en el eje X
for df in [temp, hum, vien]:
    df["Tiempo"] = df.index * intervalo

# ----------- Funciones de procesamiento -----------

# Aplica un promedio móvil centrado con ventana de 3 muestras
def promediado_movil(senal, ventana=3):
    return senal.rolling(window=ventana, center=True).mean()

# Filtro pasa bajas para suavizar y eliminar ruido de alta frecuencia
def filtro_pasa_bajas(senal, fc=0.06, orden=2):
    b, a = butter(orden, fc, btype='low')      # Diseño del filtro
    return filtfilt(b, a, senal)               # Aplicación sin desfase

# Filtro pasa bandas para conservar solo una franja media de frecuencias
def filtro_pasa_bandas(senal, f_low=0.01, f_high=0.09, orden=2):
    b, a = butter(orden, [f_low, f_high], btype='band')
    return filtfilt(b, a, senal)

# Cálculo del espectro de frecuencias usando la Transformada de Fourier
def calcular_fft(senal):
    N = len(senal)
    fft_vals = fft(senal)
    magnitud = np.abs(fft_vals) / N            # Magnitud normalizada
    frecs = fftfreq(N, d=1/fs)                 # Vector de frecuencias
    return frecs[:N//2], magnitud[:N//2]       # Solo la mitad positiva (sin duplicados)

# ----------- Función principal de procesamiento y graficación -----------

def procesar_sensor(df, columna, nombre, unidad):
    tiempo = df["Tiempo"]
    original = df[columna]

    # Aplicamos cada etapa de procesamiento
    prom = promediado_movil(original)
    lp = filtro_pasa_bajas(original)
    bp = filtro_pasa_bandas(original)

    # Calculamos la FFT de cada una
    f1, m1 = calcular_fft(original)
    f2, m2 = calcular_fft(lp)
    f3, m3 = calcular_fft(bp)

    # Creamos una figura con 2 paneles: señal en el tiempo y espectro
    fig, axs = plt.subplots(2, 1, figsize=(12, 8))

    # --- Primera gráfica: señal en el tiempo ---
    axs[0].plot(tiempo, original, label="Original", color='blue', alpha=0.6)
    axs[0].plot(tiempo, prom, label="Promediado", color='black', linestyle='--')
    axs[0].plot(tiempo, lp, label="Pasa Bajas", color='red', linestyle='--')
    axs[0].plot(tiempo, bp, label="Pasa Bandas", color='green', linestyle=':')
    axs[0].set_title(f"{nombre} - Señal en el Tiempo")
    axs[0].set_xlabel("Tiempo (s)")
    axs[0].set_ylabel(unidad)
    axs[0].legend()
    axs[0].grid(True)

    # --- Segunda gráfica: espectro de frecuencia ---
    axs[1].plot(f1, m1, label="Original", color='blue', alpha=0.6)
    axs[1].plot(f2, m2, label="Pasa Bajas", color='red', linestyle='--')
    axs[1].plot(f3, m3, label="Pasa Bandas", color='green', linestyle=':')
    axs[1].set_title(f"{nombre} - Espectro de Frecuencia")
    axs[1].set_xlabel("Frecuencia (Hz)")
    axs[1].set_ylabel("Magnitud")
    axs[1].legend()
    axs[1].grid(True)

    # Ajuste final para que no se empalmen etiquetas
    plt.tight_layout()
    plt.show()

# ----------- Ejecutamos el análisis para cada sensor -----------

procesar_sensor(temp, "Temperatura_C", "Temperatura", "°C")
procesar_sensor(hum, "Humedad_Relativa_%", "Humedad", "% HR")
procesar_sensor(vien, "Velocidad_Viento_mps", "Viento", "m/s")
